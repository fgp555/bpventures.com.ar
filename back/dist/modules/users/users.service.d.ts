import { Repository } from 'typeorm';
import { UserEntity } from '../../entities/user.entity';
import { UpdateUserDto } from './dtos/users.update.dto';
export declare class UsersService {
    private userRepository;
    constructor(userRepository: Repository<UserEntity>);
    getAllUsers(): Promise<{
        id: number;
        email: string;
        Names: string;
        LastName: string;
        Position: string;
        empresa: string;
        cuit: number;
        domicilio: string;
        verifiedEmail: boolean;
        mfaEnabled: boolean;
        mfaBackupCodes: string;
        mfaSecret: string;
        mfaVerified: Date;
        createdAt: Date;
        modifiedAt: Date;
        statusId: number;
        permissions: import("../../entities/permission.entity").Permission[];
        invoices: import("../../entities/invoice.entity").Invoice[];
        impactedNotifications: import("../../entities/notification.entity").Notification[];
        triggeredNotifications: import("../../entities/notification.entity").Notification[];
        isAdmin: boolean;
        company: import("../../entities/company.entity").Company;
        imgProfile: string;
    }[]>;
    getUsers(page?: number, Limit?: number): Promise<{
        id: number;
        email: string;
        Names: string;
        LastName: string;
        Position: string;
        empresa: string;
        cuit: number;
        domicilio: string;
        verifiedEmail: boolean;
        mfaEnabled: boolean;
        mfaBackupCodes: string;
        mfaSecret: string;
        mfaVerified: Date;
        createdAt: Date;
        modifiedAt: Date;
        statusId: number;
        permissions: import("../../entities/permission.entity").Permission[];
        invoices: import("../../entities/invoice.entity").Invoice[];
        impactedNotifications: import("../../entities/notification.entity").Notification[];
        triggeredNotifications: import("../../entities/notification.entity").Notification[];
        isAdmin: boolean;
        company: import("../../entities/company.entity").Company;
        imgProfile: string;
    }[] | {
        users: {
            id: number;
            email: string;
            Names: string;
            LastName: string;
            Position: string;
            empresa: string;
            cuit: number;
            domicilio: string;
            verifiedEmail: boolean;
            mfaEnabled: boolean;
            mfaBackupCodes: string;
            mfaSecret: string;
            mfaVerified: Date;
            createdAt: Date;
            modifiedAt: Date;
            statusId: number;
            permissions: import("../../entities/permission.entity").Permission[];
            invoices: import("../../entities/invoice.entity").Invoice[];
            impactedNotifications: import("../../entities/notification.entity").Notification[];
            triggeredNotifications: import("../../entities/notification.entity").Notification[];
            isAdmin: boolean;
            company: import("../../entities/company.entity").Company;
            imgProfile: string;
        }[];
        totalPages: number;
    }>;
    updateUser(id: number, updateUser: UpdateUserDto): Promise<{
        email: string;
        Names: string;
        LastName: string;
        Position: string;
        verifiedEmail: boolean;
        mfaEnabled: boolean;
        mfaBackupCodes: string;
        mfaSecret: string;
        mfaVerified: Date;
        active?: boolean;
        isAdmin: boolean;
        companyId?: any;
        id: number;
        empresa: string;
        cuit: number;
        domicilio: string;
        createdAt: Date;
        modifiedAt: Date;
        statusId: number;
        permissions: import("../../entities/permission.entity").Permission[];
        invoices: import("../../entities/invoice.entity").Invoice[];
        impactedNotifications: import("../../entities/notification.entity").Notification[];
        triggeredNotifications: import("../../entities/notification.entity").Notification[];
        company: import("../../entities/company.entity").Company;
        imgProfile: string;
    }>;
    getUserById(id: number): Promise<Omit<UserEntity, 'password'>>;
    updateUserStatus(userId: number, statusId: number): Promise<{
        message: string;
    }>;
    deleteUser(id: number): Promise<import("typeorm").DeleteResult>;
    verifyEmail(email: string): Promise<UserEntity>;
}
